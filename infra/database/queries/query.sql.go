// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package queries

import (
	"context"
	"time"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    document
) VALUES (
             $1
         )
    RETURNING id, document
`

func (q *Queries) CreateAccount(ctx context.Context, document string) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount, document)
	var i Account
	err := row.Scan(&i.ID, &i.Document)
	return i, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    account_id, operation_type_id, amount, event_date
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING id, account_id, operation_type_id, amount, event_date
`

type CreateTransactionParams struct {
	AccountID       int64
	OperationTypeID int64
	Amount          float32
	EventDate       time.Time
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.AccountID,
		arg.OperationTypeID,
		arg.Amount,
		arg.EventDate,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.OperationTypeID,
		&i.Amount,
		&i.EventDate,
	)
	return i, err
}

const getAccount = `-- name: GetAccount :one
SELECT id, document FROM accounts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(&i.ID, &i.Document)
	return i, err
}

const getAccountByDocument = `-- name: GetAccountByDocument :one
SELECT id, document FROM accounts WHERE document = $1 LIMIT 1
`

func (q *Queries) GetAccountByDocument(ctx context.Context, document string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByDocument, document)
	var i Account
	err := row.Scan(&i.ID, &i.Document)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, account_id, operation_type_id, amount, event_date FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.OperationTypeID,
		&i.Amount,
		&i.EventDate,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :one
SELECT id, document FROM accounts
`

func (q *Queries) ListAccounts(ctx context.Context) (Account, error) {
	row := q.db.QueryRowContext(ctx, listAccounts)
	var i Account
	err := row.Scan(&i.ID, &i.Document)
	return i, err
}

const listTransactions = `-- name: ListTransactions :many
SELECT id, account_id, operation_type_id, amount, event_date FROM transactions
ORDER BY id
`

func (q *Queries) ListTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.OperationTypeID,
			&i.Amount,
			&i.EventDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
