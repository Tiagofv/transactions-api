// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dto "tiagofv.com/transactions/core/domain/dto"

	queries "tiagofv.com/transactions/infra/database/queries"
)

// AccountsInterface is an autogenerated mock type for the AccountsInterface type
type AccountsInterface struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: data
func (_m *AccountsInterface) CreateAccount(data dto.AccountDto) (queries.Account, error) {
	ret := _m.Called(data)

	var r0 queries.Account
	if rf, ok := ret.Get(0).(func(dto.AccountDto) queries.Account); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(queries.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.AccountDto) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccount provides a mock function with given fields: id
func (_m *AccountsInterface) FindAccount(id int64) (queries.Account, error) {
	ret := _m.Called(id)

	var r0 queries.Account
	if rf, ok := ret.Get(0).(func(int64) queries.Account); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(queries.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAccountByDocument provides a mock function with given fields: document
func (_m *AccountsInterface) FindAccountByDocument(document string) (queries.Account, error) {
	ret := _m.Called(document)

	var r0 queries.Account
	if rf, ok := ret.Get(0).(func(string) queries.Account); ok {
		r0 = rf(document)
	} else {
		r0 = ret.Get(0).(queries.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAccountsInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewAccountsInterface creates a new instance of AccountsInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAccountsInterface(t mockConstructorTestingTNewAccountsInterface) *AccountsInterface {
	mock := &AccountsInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
